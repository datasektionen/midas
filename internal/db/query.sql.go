// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createProfile = `-- name: CreateProfile :one
iNSERT INTO profile (
    kth_id
) VALUES (
    $1
)
RETURNING id, kth_id, bank, bank_account_number, clearing_number
`

func (q *Queries) CreateProfile(ctx context.Context, kthID string) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile, kthID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.KthID,
		&i.Bank,
		&i.BankAccountNumber,
		&i.ClearingNumber,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT id, kth_id, bank, bank_account_number, clearing_number FROM profile
WHERE kth_id = $1 LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, kthID string) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfile, kthID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.KthID,
		&i.Bank,
		&i.BankAccountNumber,
		&i.ClearingNumber,
	)
	return i, err
}

const listProfiles = `-- name: ListProfiles :many
SELECT id, kth_id, bank, bank_account_number, clearing_number FROM profile
ORDER BY kth_id
`

func (q *Queries) ListProfiles(ctx context.Context) ([]Profile, error) {
	rows, err := q.db.Query(ctx, listProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.KthID,
			&i.Bank,
			&i.BankAccountNumber,
			&i.ClearingNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

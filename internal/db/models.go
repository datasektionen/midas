// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ExpenseType string

const (
	ExpenseTypeReimbursable ExpenseType = "reimbursable"
	ExpenseTypeInvoice      ExpenseType = "invoice"
	ExpenseTypeCard         ExpenseType = "card"
)

func (e *ExpenseType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ExpenseType(s)
	case string:
		*e = ExpenseType(s)
	default:
		return fmt.Errorf("unsupported scan type for ExpenseType: %T", src)
	}
	return nil
}

type NullExpenseType struct {
	ExpenseType ExpenseType
	Valid       bool // Valid is true if ExpenseType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullExpenseType) Scan(value interface{}) error {
	if value == nil {
		ns.ExpenseType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ExpenseType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullExpenseType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ExpenseType), nil
}

type BlobFile struct {
	ID        int32
	ExpenseID int32
	FileName  string
}

type DiscussionPost struct {
	ID        int32
	PostedAt  pgtype.Timestamp
	Content   string
	ExpenseID int32
	AuthorID  int32
}

type Expense struct {
	ID             int32
	Kind           ExpenseType
	Description    string
	IsDigital      bool
	AccountingDate pgtype.Date
	CreatedAt      pgtype.Timestamp
	ConfirmedAt    pgtype.Timestamp
	VerificationNr pgtype.Text
	CreatedBy      int32
	ConfirmedBy    pgtype.Int4
	PaymentID      pgtype.Int4
}

type ExpenseInvoice struct {
	ID      int32
	DueDate pgtype.Date
}

type ExpensePart struct {
	ID         int32
	ExpenseID  int32
	Ammount    pgtype.Numeric
	Comitte    string
	BudgetLine string
	CostCentre string
	AttestedAt pgtype.Timestamp
	AttestedBy pgtype.Int4
}

type Payment struct {
	ID     int32
	PaidAt pgtype.Timestamp
	PaidBy int32
	PaidTo int32
}

type Profile struct {
	ID                int32
	KthID             string
	Bank              string
	BankAccountNumber string
	ClearingNumber    string
}
